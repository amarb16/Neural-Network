#BlueJ class context
comment0.params=numInputs\ numOutputs\ learningRate
comment0.target=PerceptronNetwork(int,\ int,\ double)
comment0.text=\n\ Create\ a\ perceptron\ network\ with\ the\ specified\ parameters.\n
comment1.params=
comment1.target=PerceptronNetwork\ makeHardcoded()
comment1.text=\n\ Edit\ this\ method\ as\ you\ see\ fit,\ and\ then\ call\ it\ with\:\n\ PerceptronNetwork.makeHardcoded()\n\ to\ create\ a\ perceptron\ network\ with\ weights\ hardcoded\ as\ you\ would\ like,\n\ for\ testing\ by\ hand.\n
comment10.params=numEpochs
comment10.target=void\ learnXor(int)
comment10.text=\n\ Creates\ and\ trains\ a\ network\ to\ learn\ XOR.\n\ Will\ fail,\ of\ course,\ since\ XOR\ is\ not\ linearly\ separable.\n
comment11.params=examples\ numEpochs
comment11.target=void\ learnBool(Example[],\ int)
comment11.text=\n\ A\ helper\ method\ for\ the\ boolean\ function\ learning\ examples\ above.\n
comment2.params=inputs
comment2.target=double[]\ computeOutput(double[])
comment2.text=\n\ Computes\ the\ output\ the\ given\ network\ would\ obtain\ on\ the\ given\ example's\ inputs.\n\ Simply\ calls\ computeOutput\ in\ the\ Perceptron\ class,\ on\ each\ perceptron\ in\ the\ network.\n
comment3.params=ex
comment3.target=void\ train1Example(Example)
comment3.text=\n\ Updates\ the\ weights\ on\ each\ perceptron\ in\ the\ network,\ according\ to\ the\ given\ example.\n\ Simply\ calls\ train1Example\ in\ the\ Perceptron\ class,\ on\ each\ perceptron\ in\ the\ network.\n
comment4.params=examples\ numEpochs
comment4.target=void\ trainEpochs(Example[],\ int)
comment4.text=\n\ Updates\ the\ weights\ on\ each\ perceptron\ in\ the\ network,\ according\ to\ the\ given\ set\ of\ examples,\ \n\ trained\ for\ the\ given\ number\ of\ epochs.\n\ Simply\ calls\ trainEpochs\ in\ the\ Perceptron\ class,\ on\ each\ perceptron\ in\ the\ network.\n
comment5.params=examples\ outputLevel
comment5.target=void\ runTestSet(Example[],\ int)
comment5.text=\n\ Computes\ the\ output\ of\ this\ network\ on\ each\ of\ the\ given\ examples,\n\ and\ determines\ the\ average\ error\ on\ this\ output.\n\ \n\ @param\ outputLevel\ Set\ to\ 0\ to\ print\ only\ the\ average\ error,\ 1\ to\ also\ identify\ each\ example\ by\ name\ and\ print\ its\ error,\n\ or\ 2\ to\ list\ each\ full\ example\ and\ print\ its\ error.\n
comment6.params=
comment6.target=java.lang.String\ toString()
comment6.text=\n\ Provides\ a\ String\ representation\ of\ this\ network.\n
comment7.params=
comment7.target=void\ testPNet()
comment7.text=\n\ Tests\ the\ network\ code\ of\ this\ class.\ Really\ just\ creates\ a\ network\ of\ two\ perceptrons\ that\n\ are\ exactly\ the\ same.\n
comment8.params=numEpochs
comment8.target=void\ learnAnd(int)
comment8.text=\n\ Creates\ and\ trains\ a\ network\ to\ learn\ AND.\n
comment9.params=numEpochs
comment9.target=void\ learnOr(int)
comment9.text=\n\ Creates\ and\ trains\ a\ network\ to\ learn\ OR.\n
numComments=12
